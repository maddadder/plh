@page "/gameentry/{Name?}"
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.WebUtilities
@using plhhoa.Services
@inject GameEntryService GameEntryService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager UriHelper


@if (gameEntries == null)
{
    <div class="container">
        <div class="row">
            <div class="col-xs-12 col-md-12">loading...</div>
        </div>
    </div>
}
else
{
    <div class="container">
        <div class="row">
            <div class="col-xs-2 col-md-2">
                <a href='/gameEntry/add' class="btn btn-primary" role="button">
                    <i class="fas fa-user-plus"></i>
                    Add Content Entry
                </a>
            </div>
            <div class="col-xs-3 col-md-3">
                Skip<input type="number" class="form-control" 
                    @bind="Skip" @bind:event="oninput" @onchange="SetPage" step="@Limit" min="0" />
            </div>
            <div class="col-xs-3 col-md-3">
                Limit<input type="number" class="form-control" 
                    @bind="Limit" @bind:event="oninput" @onchange="SetPage" step="10" min="10" />
            </div>
            <div class="col-xs-12 col-md-4">
                &#160;
            </div>
            <div class="col-xs-12 col-md-12">
                <table class="table">
                    <thead>
                        <tr>
                            <th>Content</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var gameEntry in gameEntries.OrderBy(x => x.Created))
                        {
                        <tr>
                            <td>
                                <a href='/gameentry/edit/@gameEntry.Pid?Skip=@Skip&Limit=@Limit' class="btn btn-outline-dark" role="button">
                                    Edit
                                </a> | 
                                <a href='/gameentry/delete/@gameEntry.Pid?Skip=@Skip&Limit=@Limit' class="btn btn-outline-danger" role="button">
                                    Delete
                                </a><br/>
                                <span><b>Page Name:</b> '@gameEntry.Name'</span><br/> 
                                <span><b>Created:</b> @gameEntry.Created.ToString("MM/dd/yy")</span><br/>
                                <span><b>Modified:</b> @gameEntry.Modified.ToString("MM/dd/yy")</span><br/>
                                <b>Paragraph(s):</b>
                                <ul style="margin:0px;padding:0px;">
                                @foreach (var desc in gameEntry.Description)
                                {
                                    <li>@desc</li>
                                }
                                </ul>
                                <br/>
                                <b>Option(s):</b>
                                <ul>
                                @if(gameEntry.Options != null)
                                {
                                    @foreach (var gameOption in gameEntry.Options)
                                    {
                                        <li><b>link-name:</b> '@gameOption.Next'<b>, link-title:</b> '<a style="text-decoration:underline" href="/gameentry/@gameOption.Next" role="button">@gameOption.Description</a>'</li>
                                    }
                                    if(!gameEntry.Options.Any()){
                                        <li>No more content. Click <a style="text-decoration:underline" href="/gameentry/begin">here</a> to start over.</li>
                                    }
                                }
                                </ul>
                            </td>
                        </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>
}


@code {

    [Parameter]
    public string Name { get; set; }

    public int Skip { get; set; }
    public int Limit { get; set; }

    protected List<GameEntry> gameEntries = new();
    protected List<GameEntry> searchGameEntries = new();

    protected override async Task OnInitializedAsync()
    {
        
    }
    protected string SearchString { get; set; } = string.Empty;
    protected override async Task OnParametersSetAsync()
    {
        var uri = UriHelper.ToAbsoluteUri(UriHelper.Uri);
        QueryHelpers.ParseQuery(uri.Query).TryGetValue("Skip", out var param1);
        var skip = 0;
        if(param1.Count() > 0){
            int.TryParse(param1.First(), out skip);
            Skip = skip;
        }
        QueryHelpers.ParseQuery(uri.Query).TryGetValue("Limit", out var param2);
        if(param2.Count() > 0){
            var limit = 0;
            int.TryParse(param2.First(), out limit);
            Limit = limit;
        }

        if (Skip < 1) 
            Skip = 0;
        if (Limit <= 1) 
            Limit = 10;
        gameEntries = (await GameEntryService.List(Name, Limit, Skip)).ToList();
        searchGameEntries = gameEntries;
    }
    protected void FilterName()
    {
        if (!string.IsNullOrEmpty(SearchString))
        {
            gameEntries = searchGameEntries
                .Where(x => x.Name.IndexOf(SearchString, StringComparison.OrdinalIgnoreCase) != -1)
                .ToList();
        }
        else
        {
            gameEntries = searchGameEntries;
        }
    }
    protected void ResetSearch()
    {
        SearchString = string.Empty;
        gameEntries = searchGameEntries;
    }
    private void SetPage()
    {
        var query = new Dictionary<string, string> 
        { 
            { "Skip", Skip.ToString() },
            { "Limit", Limit.ToString() },
        };
        UriHelper.NavigateTo(QueryHelpers.AddQueryString($"{UriHelper.BaseUri}gameentry", query), true);
    }
}
