@page "/unsubscribe"
@using Lib
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.WebUtilities
@using plhhoa.Services

@inject UserProfileService UserProfileService
@inject NavigationManager NavigationManager
@inject AppSecrets _appSecrets
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject EmailService EmailService
@inject NavigationManager UriHelper
<h2>UserProfile</h2>
<br />
<AuthorizeView>
    <Authorized Context="Auth">
        <div class="form-group">
            <table class="table">
                <tbody>
                    <tr>
                        <td>FirstName</td>
                        <td>@userProfile.FirstName</td>
                    </tr>
                    <tr>
                        <td>LastName</td>
                        <td>@userProfile.LastName</td>
                    </tr>
                    <tr>
                        <td>Email</td>
                        <td>@userProfile.Email</td>
                    </tr>
                    <tr>
                        <td>Receive Email Notifications</td>
                        <td>@userProfile.ReceiveEmailNotificationFromSms</td>
                    </tr>
                    <tr>
                        <td>Email is Verified</td>
                        <td>@userProfile.EmailIsVerified</td>
                    </tr>
                </tbody>
            </table>
        </div>
        <div class="form-group">
            <a href='/userprofile/edit' class="btn btn-outline-dark" role="button">
                Edit
            </a>
        </div>
    </Authorized>
    <NotAuthorized>
        You are not authorized to view this page
    </NotAuthorized>
</AuthorizeView>
@code {
    [Parameter]
    public string token { get; set; }
    protected string Title = "View";
    protected UserProfile userProfile = new();
    protected override async Task OnParametersSetAsync()
    {
        var uri = UriHelper.ToAbsoluteUri(UriHelper.Uri);
        QueryHelpers.ParseQuery(uri.Query).TryGetValue("jwt", out var token);
        
        var validatedToken = EmailService.ValidateCurrentToken(token);
        if(validatedToken == null)
        {
            return;
        }
        string PreferredUsername = EmailService.GetUserIdFromClaim(token);
        Console.WriteLine($"PreferredUsername: {PreferredUsername}");
        if (!string.IsNullOrEmpty(PreferredUsername))
        {
            var rows = await UserProfileService.GetUserProfileAsync(PreferredUsername);
            if(rows.Any())
            {
                var row = rows.First();
                row.ReceiveEmailNotificationFromSms = false;
                await UserProfileService.Put(row);
                userProfile = row;
            }
        }
    }
}